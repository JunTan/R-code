xmlGetAttr(rowNodes[[1]][1], "country")
xmlGetAttr(rowNodes[[1]][[1]], "country")
xmlGetAttr(rowNodes[[1]][[3]], "content")
cia = sapply(rowNodes, function(node) xmlGetAttr(node[[1]], "country")
cia = sapply(rowNodes, function(node) xmlGetAttr(node[[1]], "country"))
'//columnHeader[@title="ISO 3166"]/../row')
rowNodes = getNodeSet(fbRoot,
'//columnHeader[@title="ISO 3166"]/../row')
cia = sapply(rowNodes, function(node) xmlGetAttr(node[[1]], "country"))
head(cia)
iso = sapply(rowNodes, function(node) xmlGetAttr(node[[3]], "content"))
head(iso)
mapCode = data.frame(cia, iso)
View(mapCode)
View(fbDF)
View(latlon)
colnames(mapCode) <- c("ctry", "iso")
View(mapCode)
map_fbDF = merge(mapCode, fbDF)
View(map_fbDF)
colnames(latlon) <- c("iso", "latitude", "longitude")
ctryStats = merge(map_fbDF, latlon)
View(ctryStats)
View(ctryStats)
library(ggplot2)
ggplot() +
geom_polygon(data=ctryStats, aes(x=longitude, y=latitude, group=pop), fill="grey40",
colour="grey90", alpha=1)
ggplot() +
geom_polygon(data=ctryStats, aes(x=longitude, y=latitude), fill="grey40",
colour="grey90", alpha=1)
ggplot() + geom_point(data=ctryStats, aes(x=longitude, y=latitude, size = pop), color="imRate") + scale_size(name="imRate")
ggplot() + geom_point(data=ctryStats, aes(x=longitude, y=latitude, size = pop), color="coral1") + scale_size(name="imRate")
ggplot() + geom_point(data=ctryStats, aes(x=longitude, y=latitude, size = pop), color="coral1") + scale_size(name="imRate")
library(ggplot2)
ggplot() + geom_polygon( data=ctryStats, aes(x=longitude, y=latitude, group = group),colour="white" )+
geom_point(data=ctryStats, aes(x=longitude, y=latitude, size = pop), color="coral1") + scale_size(name="imRate")
ggplot() + geom_polygon( data=ctryStats, aes(x=longitude, y=latitude),colour="white")+
geom_point(data=ctryStats, aes(x=longitude, y=latitude, size = pop), color="coral1") + scale_size(name="imRate")
install.packages("maps")
mapWorld <- borders("world", colour="gray50", fill="gray50") # create a layer of borders
mapWorld = map_data("world")
ggplot() + geom_polygon( data=mapWorld, aes(x=long, y=lat, group = group),colour="white")+
geom_point(data=ctryStats, aes(x=longitude, y=latitude, size = pop), color="coral1") + scale_size(name="imRate")
ggplot() + geom_polygon( data=mapWorld, aes(x=long, y=lat, group = group),colour="white", fill="grey10")
ggplot() + ggeom_polygon( data=mapWorld, aes(x=long, y=lat, group = group),colour="white", fill="grey10" )+
geom_point(data=ctryStats, aes(x=longitude, y=latitude, size = pop), color="coral1") + scale_size(name="imRate")
ggplot() + geom_polygon( data=mapWorld, aes(x=long, y=lat, group = group),colour="white", fill="grey10" )+
geom_point(data=ctryStats, aes(x=longitude, y=latitude, size = pop), color="coral1") + scale_size(name="imRate")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
# Chunk 1
require(XML)
uCIA =   "http://www.stat.berkeley.edu/users/nolan/data/factbook2015.xml"
fbDoc = xmlParse(uCIA)
fbRoot = xmlRoot(fbDoc)
# Chunk 2
rate_nodes = getNodeSet(fbRoot, '//field[@name="Infant mortality rate"]/rank')
imRate = as.numeric(xmlSApply(rate_nodes, xmlGetAttr, "number"))
imCtry = xmlSApply(rate_nodes, xmlGetAttr, "country")
# Chunk 3
imDF = data.frame(imRate, imCtry,
stringsAsFactors = FALSE)
# Chunk 4
pop_nodes = getNodeSet(fbRoot, '//field[@name="Population"]/rank')
pop = as.numeric(xmlSApply(pop_nodes, xmlGetAttr, "number"))
ctry =  xmlSApply(pop_nodes, xmlGetAttr, "country")
popDF = data.frame(ctry, pop, stringsAsFactors = FALSE)
# Chunk 5
colnames(imDF) <- c("imRate", "ctry")
fbDF = merge(imDF, popDF)
# Chunk 6
latlon = read.csv("http://www.stat.berkeley.edu/users/nolan/data/country_latlon2016.csv")
# Chunk 7
rowNodes = getNodeSet(fbRoot,
'//columnHeader[@title="ISO 3166"]/../row')
# Chunk 8
cia = sapply(rowNodes, function(node) xmlGetAttr(node[[1]], "country"))
iso = sapply(rowNodes, function(node) xmlGetAttr(node[[3]], "content"))
mapCode = data.frame(cia, iso)
# Chunk 9
colnames(mapCode) <- c("ctry", "iso")
map_fbDF = merge(mapCode, fbDF)
colnames(latlon) <- c("iso", "latitude", "longitude")
ctryStats = merge(map_fbDF, latlon)
# Chunk 10: final
library(ggplot2)
library(maps)
mapWorld = map_data("world")
ggplot() + geom_polygon( data=mapWorld, aes(x=long, y=lat, group = group),colour="white", fill="grey10" )+
geom_point(data=ctryStats, aes(x=longitude, y=latitude, size = pop), color="coral1") + scale_size(name="imRate")
library(ggplot2)
library(maps)
mapWorld = map_data("world")
ggplot() + geom_polygon( data=mapWorld, aes(x=long, y=lat, group = group),colour="white", fill="grey10" )+
geom_point(data=ctryStats, aes(x=longitude, y=latitude, size = pop, color=imRate), color="coral1") + scale_colour_gradientn("infant mortalit Rate",
colours=c( "#f9f3c2","#660000"))
library(ggplot2)
library(maps)
mapWorld = map_data("world")
ggplot() + geom_polygon( data=mapWorld, aes(x=long, y=lat, group = group),colour="white", fill="grey10" )+
geom_point(data=ctryStats, aes(x=longitude, y=latitude, size = pop, color=imRate), color="grey20") + scale_colour_gradientn("infant mortalit Rate",
colours=c( "#f9f3c2","#660000"))
colours=c( "#f9f3c2","#660000"))
library(ggplot2)
library(maps)
mapWorld = map_data("world")
ggplot() + geom_polygon( data=mapWorld, aes(x=long, y=lat, group = group),colour="white", fill="grey10" )+
geom_point(data=ctryStats, aes(x=longitude, y=latitude, size = pop, color=imRate), color="coral1") +
scale_colour_gradientn("infant mortalit Rate",
colours=c( "#f9f3c2","#660000"))
library(ggplot2)
library(maps)
mapWorld = map_data("world")
ggplot() + geom_polygon( data=mapWorld, aes(x=long, y=lat, group = group),colour="white", fill="grey10" )+
geom_point(aes(x=longitude, y=latitude, size = pop, color=imRate), data=ctryStats, alpha=1, color="grey20")
geom_point(data=ctryStats, aes(x=longitude, y=latitude, color=imRate), color="coral1") +
scale_colour_gradientn("infant mortalit Rate",
colours=c( "#f9f3c2","#660000"))
library(ggplot2)
library(maps)
mapWorld = map_data("world")
ggplot() + geom_polygon( data=mapWorld, aes(x=long, y=lat, group = group),colour="white", fill="grey10" )+
geom_point(aes(x=longitude, y=latitude, size = pop, color=imRate), data=ctryStats, alpha=1, color="grey20") +
geom_point(data=ctryStats, aes(x=longitude, y=latitude, color=imRate), color="coral1") +
scale_colour_gradientn("infant mortalit Rate",
colours=c( "#f9f3c2","#660000"))
library(ggplot2)
library(maps)
mapWorld = map_data("world")
ggplot() + geom_polygon( data=mapWorld, aes(x=long, y=lat, group = group),colour="white", fill="grey10" )+
geom_point(data=ctryStats, aes(x=longitude, y=latitude, size = pop, color=imRate), color="coral1") +
scale_colour_gradientn("infant mortalit Rate",
colours=c( "#f9f3c2","#660000"))
library(ggplot2)
library(maps)
mapWorld = map_data("world")
ggplot() + geom_polygon( data=mapWorld, aes(x=long, y=lat, group = group),colour="white", fill="grey10" )+
geom_point(data=ctryStats, aes(x=longitude, y=latitude, size = pop, color=imRate)) +
scale_colour_gradientn("infant mortalit Rate",
colours=c( "#f9f3c2","#660000"))
library(ggplot2)
library(maps)
mapWorld = map_data("world")
ggplot() + geom_polygon( data=mapWorld, aes(x=long, y=lat, group = group),colour="white", fill="grey90" )+
geom_point(data=ctryStats, aes(x=longitude, y=latitude, size = pop, color=imRate)) +
scale_colour_gradientn("infant mortalit Rate",
colours=c( "#f9f3c2","#660000"))
library(ggplot2)
library(maps)
mapWorld = map_data("world")
ggplot() + geom_polygon( data=mapWorld, aes(x=long, y=lat, group = group),colour="grey90", fill="grey10" )+
geom_point(data=ctryStats, aes(x=longitude, y=latitude, size = pop, color=imRate)) +
scale_colour_gradientn("infant mortalit Rate",
colours=c( "#f9f3c2","#660000"))
library(ggplot2)
library(maps)
mapWorld = map_data("world")
ggplot() + geom_polygon( data=mapWorld, aes(x=long, y=lat, group = group),colour="grey90", fill="grey10" )+
geom_point(data=ctryStats, aes(x=longitude, y=latitude, size = pop, color=imRate)) +
scale_colour_gradientn("infant mortalit Rate",
colours=c( "#ff0033","#660000"))
library(ggplot2)
library(maps)
mapWorld = map_data("world")
ggplot() + geom_polygon( data=mapWorld, aes(x=long, y=lat, group = group),colour="grey90", fill="grey10" )+
geom_point(data=ctryStats, aes(x=longitude, y=latitude, size = pop, color=imRate)) +
scale_colour_gradientn("infant mortalit Rate",
colours=c( "#ff9933","#660000"))
library(ggplot2)
library(maps)
mapWorld = map_data("world")
ggplot() + geom_polygon( data=mapWorld, aes(x=long, y=lat, group = group),colour="grey90", fill="grey10" )+
geom_point(data=ctryStats, aes(x=longitude, y=latitude, size = pop, color=imRate)) +
scale_colour_gradientn("infant mortalit Rate",
colours=c( "#ffff66","#660000"))
library(ggplot2)
library(maps)
mapWorld = map_data("world")
ggplot() + geom_polygon( data=mapWorld, aes(x=long, y=lat, group = group),colour="grey90", fill="grey10" )+
geom_point(data=ctryStats, aes(x=longitude, y=latitude, size = pop, color=imRate)) +
scale_colour_gradientn("infant mortalit Rate",
colours=c( "#ffff00","#660000"))
library(ggplot2)
library(maps)
mapWorld = map_data("world")
ggplot() +
geom_point(data=ctryStats, aes(x=longitude, y=latitude, size = pop, color=imRate)) +
scale_colour_gradientn("infant mortalit Rate",
colours=c( "#ffff00","#660000"))
library(ggplot2)
library(maps)
mapWorld = map_data("world")
ggplot() + geom_polygon(data=mapWorld, aes(x=long, y=lat, group = group),colour="grey90", fill="grey10" )+
geom_point(data=ctryStats, aes(x=longitude, y=latitude, size = pop, color=imRate)) +
scale_colour_gradientn("infant mortalit Rate",
colours=c( "#ffff00","#660000"))
library(ggplot2)
library(maps)
mapWorld = map_data("world")
ggplot() + geom_polygon(data=mapWorld, aes(x=long, y=lat, group = group),colour="white", fill="grey10" )+
geom_point(data=ctryStats, aes(x=longitude, y=latitude, size = pop, color=imRate)) +
scale_colour_gradientn("infant mortalit Rate",
colours=c( "#ffff00","#660000"))
library(ggplot2)
library(maps)
mapWorld = map_data("world")
ggplot() + geom_polygon(data=mapWorld, aes(x=long, y=lat, group = group),colour="white", fill="grey10" )+
geom_point(data=ctryStats, aes(x=longitude, y=latitude, size = pop, color=imRate)) +
scale_colour_gradientn("infant mortalit Rate",
colours=c( "#6666cc","#660066"))
library(ggplot2)
library(maps)
mapWorld = map_data("world")
ggplot() + geom_polygon(data=mapWorld, aes(x=long, y=lat, group = group),colour="white", fill="grey10" )+
geom_point(data=ctryStats, aes(x=longitude, y=latitude, size = pop, color=imRate)) +
scale_colour_gradientn("infant mortalit Rate",
colours=c( "#6666cc","#990000"))
---
# Chunk 1
require(XML)
uCIA =   "http://www.stat.berkeley.edu/users/nolan/data/factbook2015.xml"
fbDoc = xmlParse(uCIA)
fbRoot = xmlRoot(fbDoc)
# Chunk 2
rate_nodes = getNodeSet(fbRoot, '//field[@name="Infant mortality rate"]/rank')
imRate = as.numeric(xmlSApply(rate_nodes, xmlGetAttr, "number"))
imCtry = xmlSApply(rate_nodes, xmlGetAttr, "country")
# Chunk 3
imDF = data.frame(imRate, imCtry,
stringsAsFactors = FALSE)
# Chunk 4
pop_nodes = getNodeSet(fbRoot, '//field[@name="Population"]/rank')
pop = as.numeric(xmlSApply(pop_nodes, xmlGetAttr, "number"))
ctry =  xmlSApply(pop_nodes, xmlGetAttr, "country")
popDF = data.frame(ctry, pop, stringsAsFactors = FALSE)
# Chunk 5
colnames(imDF) <- c("imRate", "ctry")
fbDF = merge(imDF, popDF)
# Chunk 6
latlon = read.csv("http://www.stat.berkeley.edu/users/nolan/data/country_latlon2016.csv")
# Chunk 7
rowNodes = getNodeSet(fbRoot,
'//columnHeader[@title="ISO 3166"]/../row')
# Chunk 8
cia = sapply(rowNodes, function(node) xmlGetAttr(node[[1]], "country"))
iso = sapply(rowNodes, function(node) xmlGetAttr(node[[3]], "content"))
mapCode = data.frame(cia, iso)
# Chunk 9
colnames(mapCode) <- c("ctry", "iso")
map_fbDF = merge(mapCode, fbDF)
colnames(latlon) <- c("iso", "latitude", "longitude")
ctryStats = merge(map_fbDF, latlon)
# Chunk 10: final
library(ggplot2)
library(maps)
mapWorld = map_data("world")
ggplot() + geom_polygon(data=mapWorld, aes(x=long, y=lat, group = group),colour="white", fill="grey10" )+
geom_point(data=ctryStats, aes(x=longitude, y=latitude, size = pop, color=imRate)) +
scale_colour_gradientn("infant mortalit Rate",
colours=c( "#6666cc","#990000"))
library(ggplot2)
library(maps)
mapWorld = map_data("world")
ggplot() + geom_polygon(data=mapWorld, aes(x=long, y=lat, group = group),colour="white", fill="green" )+
geom_point(data=ctryStats, aes(x=longitude, y=latitude, size = pop, color=imRate)) +
scale_colour_gradientn("infant mortalit Rate",
colours=c( "#6666cc","#990000"))
library(ggplot2)
library(maps)
mapWorld = map_data("world")
ggplot() + geom_polygon(data=mapWorld, aes(x=long, y=lat, group = group),colour="white", fill="green" )+
geom_point(data=ctryStats, aes(x=longitude, y=latitude, size = pop, color=imRate)) +
scale_colour_gradientn("infant mortalit Rate",
colours=c( "#FF6633","#660000"))
# Chunk 1
require(XML)
uCIA =   "http://www.stat.berkeley.edu/users/nolan/data/factbook2015.xml"
fbDoc = xmlParse(uCIA)
fbRoot = xmlRoot(fbDoc)
# Chunk 2
rate_nodes = getNodeSet(fbRoot, '//field[@name="Infant mortality rate"]/rank')
imRate = as.numeric(xmlSApply(rate_nodes, xmlGetAttr, "number"))
imCtry = xmlSApply(rate_nodes, xmlGetAttr, "country")
# Chunk 3
imDF = data.frame(imRate, imCtry,
stringsAsFactors = FALSE)
# Chunk 4
pop_nodes = getNodeSet(fbRoot, '//field[@name="Population"]/rank')
pop = as.numeric(xmlSApply(pop_nodes, xmlGetAttr, "number"))
ctry =  xmlSApply(pop_nodes, xmlGetAttr, "country")
popDF = data.frame(ctry, pop, stringsAsFactors = FALSE)
# Chunk 5
colnames(imDF) <- c("imRate", "ctry")
fbDF = merge(imDF, popDF)
# Chunk 6
latlon = read.csv("http://www.stat.berkeley.edu/users/nolan/data/country_latlon2016.csv")
# Chunk 7
rowNodes = getNodeSet(fbRoot,
'//columnHeader[@title="ISO 3166"]/../row')
# Chunk 8
cia = sapply(rowNodes, function(node) xmlGetAttr(node[[1]], "country"))
iso = sapply(rowNodes, function(node) xmlGetAttr(node[[3]], "content"))
mapCode = data.frame(cia, iso)
# Chunk 9
colnames(mapCode) <- c("ctry", "iso")
map_fbDF = merge(mapCode, fbDF)
colnames(latlon) <- c("iso", "latitude", "longitude")
ctryStats = merge(map_fbDF, latlon)
# Chunk 10: final
library(ggplot2)
library(maps)
mapWorld = map_data("world")
ggplot() + geom_polygon(data=mapWorld, aes(x=long, y=lat, group = group),colour="white", fill="green" )+
geom_point(data=ctryStats, aes(x=longitude, y=latitude, size = pop, color=imRate)) +
scale_colour_gradientn("infant mortalit Rate",
colours=c( "#FF6633","#660000"))
library(ggplot2)
library(maps)
mapWorld = map_data("world")
ggplot() + geom_polygon(data=mapWorld, aes(x=long, y=lat, group = group),colour="white", fill="green" )+
geom_point(data=ctryStats, aes(x=longitude, y=latitude, size = sqrt(pop), color=imRate)) +
scale_colour_gradientn("infant mortalit Rate",
colours=c( "#FF6633","#660000"))
library(ggplot2)
library(maps)
mapWorld = map_data("world")
ggplot() + geom_polygon(data=mapWorld, aes(x=long, y=lat, group = group),colour="white", fill="green" )+
geom_point(data=ctryStats, aes(x=longitude, y=latitude, size = sqrt(pop), color=imRate)) +
scale_colour_gradientn("infant mortalit Rate",
colours=c( "#FF6633","#660000")) +
scale_size(name = "population", range(0,1))
library(ggplot2)
library(maps)
mapWorld = map_data("world")
ggplot() + geom_polygon(data=mapWorld, aes(x=long, y=lat, group = group),colour="white", fill="green" )+
geom_point(data=ctryStats, aes(x=longitude, y=latitude, size = pop, color=imRate)) +
scale_colour_gradientn("infant mortalit Rate",
colours=c( "#FF6633","#660000")) +
scale_size(name = "population", range(0,1))
library(ggplot2)
library(maps)
mapWorld = map_data("world")
ggplot() + geom_polygon(data=mapWorld, aes(x=long, y=lat, group = group),colour="white", fill="green" )+
geom_point(data=ctryStats, aes(x=longitude, y=latitude, size = pop, color=imRate)) +
scale_colour_gradientn("infant mortalit Rate",
colours=c( "#FF6633","#660000")) +
scale_size(name = "population", range(0.1,1))
imRate
install.packages("RSQLite")
library(RMySQL)
drv = dbDriver("MySQL")
con = dbConnect(drv, dbname = 'imdb', user = 'imdb', password = 'imdb',
host = 'radagast.berkeley.edu')
dbListTables(con)
library(RSQLite)
drv = dbDriver("SQLite")
con = dbConnect(drv, dbname = "~/Downloads/lean_imdbpy_2010.db")
dbListTables(con)
dbListFields(con, "cast_info2")
dbListTables(con)
dbListTables(con)
library(RMySQL)
drv = dbDriver("MySQL")
con_major = dbConnect(drv, dbname = 'imdb', user = 'imdb', password = 'imdb',
host = 'radagast.berkeley.edu')
dbListTables(con_major)
library(RSQLite)
drv = dbDriver("SQLite")
con = dbConnect(drv, dbname = "~/Downloads/lean_imdbpy_2010.db")
dbListTables(con)
library(RMySQL)
drv = dbDriver("MySQL")
con = dbConnect(drv, dbname = 'imdb', user = 'imdb', password = 'imdb',
host = 'radagast.berkeley.edu')
dbListTables(con_major)
library(RSQLite)
drv = dbDriver("SQLite")
con_min = dbConnect(drv, dbname = "~/Downloads/lean_imdbpy_2010.db")
dbListTables(con_min)
dbListFields(con_min, "cast_info2")
dbListFields(con, "char_name")
dbListTables(con)
dbListFields(con, "cast_info")
dbListFields(con, "person_info")
dbListFields(con, "name")
dbListFields(con, "name")
library(RMySQL)
drv = dbDriver("MySQL")
con = dbConnect(drv, dbname = 'imdb', user = 'imdb', password = 'imdb',
host = 'radagast.berkeley.edu')
dbListTables(con_major)
library(RSQLite)
drv = dbDriver("SQLite")
con_min = dbConnect(drv, dbname = "~/Downloads/lean_imdbpy_2010.db")
dbListTables(con_min)
dbListFields(con_min, "cast_info2")
dbListFields(con_min, "name2")
propF = dbGetQuery(con_min, "SELECT COUNT(*) FROM name2 GROUP BY gender;")
View(propF)
dbListFields(con_min, "name2")
propF = dbGetQuery(con_min, "SELECT gender, COUNT(*) FROM name2 GROUP BY gender;")
dbListFields(con_min, "name2")
tmp = dbGetQuery(con_min, "SELECT * FROM name2 LIMIT 10;")
View(tmp)
View(tmp)
tmp = dbGetQuery(con_min, "SELECT * FROM name2 WHERE gender = NA LIMIT 10;")
tmp = dbGetQuery(con_min, "SELECT * FROM name2 WHERE gender != 'f' and gender != 'm' LIMIT 10;")
View(tmp)
tmp = dbGetQuery(con_min, "SELECT * FROM name2 WHERE gender != 'm';")
View(propF)
tmp = dbGetQuery(con_min, "SELECT * FROM name2 WHERE gender != 'f';")
tmp = dbGetQuery(con_min, "SELECT * FROM name2 WHERE gender != 'f';")
dbListFields(con_min, "name2")
tmp = dbGetQuery(con_min, "SELECT * FROM name2 WHERE gender = 'NA';")
dbListFields(con_min, "name2")
propF = dbGetQuery(con_min, "SELECT gender, COUNT(*) FROM name2 WHERE gender = 'f' or gender = 'm' GROUP BY gender;")
propF = dbGetQuery(con_min, "SELECT gender, COUNT(*) FROM name2 GROUP BY gender;")
dbListFields(con_min, "name2")
propF = dbGetQuery(con_min, "SELECT gender, COUNT(*) FROM name2 GROUP BY gender;")
dbListFields(con_min, "name2")
tmp = dbGetQuery(con_min, "SELECT * FROM name2 WHERE gender != 'f' and gender != 'm';")
propF = dbGetQuery(con_min, "SELECT gender, COUNT(*) FROM name2 GROUP BY gender;")
tmp = dbGetQuery(con_min, "SELECT * FROM name2 LIMIT 50;")
tmp = dbGetQuery(con_min, "SELECT * FROM name2 LIMIT 100;")
tmp = dbGetQuery(con_min, "SELECT * FROM name2 LIMIT 200;")
class(propF)
dbListFields(con_min, "name2")
propF_df = dbGetQuery(con_min, "SELECT gender, COUNT(*) FROM name2 GROUP BY gender;")
View(propF_df)
prop_df[gender == 'f',]
propF_df[gender == 'f',]
propF_df[propF_df$gender == 'f',]
propF_df[propF_df$gender == 'f', propF_df$`COUNT(*)`]
propF_df[propF_df$gender == 'f', propF_df$COUNT(*)]
dbListFields(con_min, "name2")
propF_df = dbGetQuery(con_min, "SELECT gender, COUNT(*) as count FROM name2 GROUP BY gender;")
View(propF_df)
propF_df[propF_df$gender == 'f', propF_df$count]
propF_df[propF_df$gender == 'f', propF_df$gender == 'f']
propF_df[propF_df$gender == 'f', ]
propF_df[propF_df$gender == 'f', propF_df$gender == 'f']
propF_df[propF_df$gender == 'f', ]
propF_df[propF_df$gender == 'f', 2]
dbListFields(con_min, "name2")
propF_df = dbGetQuery(con_min, "SELECT gender, COUNT(*) as count FROM name2 WHERE gender = 'f' or gender = 'm' GROUP BY gender;")
propF_df[propF_df$gender == 'f', 2]
propF = propF_df[propF_df$gender == 'f', 2]/total
total = propF_df[propF_df$gender == 'f', 2] + propF_df[propF_df$gender == 'm', 2]
propF = propF_df[propF_df$gender == 'f', 2]/total
library(RMySQL)
drv = dbDriver("MySQL")
con = dbConnect(drv, dbname = 'imdb', user = 'imdb', password = 'imdb',
host = 'radagast.berkeley.edu')
dbListTables(con)
dbListFields(con, "title")
numTV = dbGetQuery(con, "SELECT COUNT(*) FROM title WHERE kind_id = 2;")
numMov = dbGetQuery(con, "SELECT COUNT(*) FROM title WHERE kind_id = 1;")
dbListFields(con, "kind_type")
dbGetQuery(con, "SELECT * FROM kind_type;")
dbListTables(con_min)
dbGetQuery(con_min, "SELECT * from kind_type;")
numMovies = dbGetQuery(con_min, "SELECT COUNT(*) FROM title WHERE kind_id = 1;")
numMovies = dbGetQuery(con_min, "SELECT COUNT(*) FROM title2 WHERE kind_id = 1;")
View(numMovies)
numMovies_df = dbGetQuery(con_min, "SELECT COUNT(*) FROM title2 WHERE kind_id = 1;")
numMovies = numMovies_df[1,1]
dbListTables(con_min)
dbListFields(con_min, 'title2')
dbGetQuery(con_min, "SELECT * FROM title2 LIMIT 10;")
tmp = dbGetQuery(con_min, "SELECT * FROM title2 LIMIT 150;")
View(tmp)
tmp = dbGetQuery(con_min, "SELECT * FROM title2 ORDER BY episode_nr LIMIT 150;")
View(tmp)
dbListTables(con_min)
tmp = dbGetQuery(con_min, "SELECT * FROM aka_title2 ORDER BY episode_nr LIMIT 150;")
View(tmp)
dbListFields(con, "name")
propF_df = dbGetQuery(con, "SELECT gender, COUNT(*) as count FROM name2 WHERE gender = 'f' or gender = 'm' GROUP BY gender;")
total = propF_df[propF_df$gender == 'f', 2] + propF_df[propF_df$gender == 'm', 2]
propF = propF_df[propF_df$gender == 'f', 2]/total
tmp = dbGetQuery(con, "SELECT * FROM aka_title2 ORDER BY episode_nr LIMIT 150;")
tmp = dbGetQuery(con, "SELECT * FROM title ORDER BY episode_nr LIMIT 150;")
numMovies_df = dbGetQuery(con, "SELECT COUNT(*) FROM title WHERE kind_id = 1;")
numMovies = numMovies_df[1,1]
library(RMySQL)
drv = dbDriver("MySQL")
con = dbConnect(drv, dbname = 'imdb', user = 'imdb', password = 'imdb',
host = 'radagast.berkeley.edu')
dbListTables(con_major)
library(RMySQL)
drv = dbDriver("MySQL")
con = dbConnect(drv, dbname = 'imdb', user = 'imdb', password = 'imdb',
host = 'radagast.berkeley.edu')
dbListTables(con_major)
library(RMySQL)
drv = dbDriver("MySQL")
con = dbConnect(drv, dbname = 'imdb', user = 'imdb', password = 'imdb',
host = 'radagast.berkeley.edu')
dbListTables(con_major)
library(RMySQL)
drv = dbDriver("MySQL")
con = dbConnect(drv, dbname = 'imdb', user = 'imdb', password = 'imdb',
host = 'radagast.berkeley.edu')
dbListTables(con)
library(igraph)
install.packages("igraph")
library(igraph)
g1 <- graph( edges=c(1,2, 2,3, 3, 1), n=3, directed=F )
plot(g1)
